{"ast":null,"code":"import { toasts } from \"../component/common/Toast/Toast\";\nimport Caver from \"caver-js\";\nimport { NETWORK_CHAIN_ID } from \"../constant\";\nlet selectedAccount;\nlet isInitialized = false;\nlet provider = window.klaytn;\nconst caver = new Caver(provider);\nconsole.log(\"PROVIDER\", provider);\nexport const initKaikas = async (setTxnWithdrawAdd, type) => {\n  if (typeof provider !== \"undefined\") {\n    try {\n      const accounts = await provider.enable();\n      selectedAccount = accounts[0]; // You now have an array of accounts!\n      // Currently only one:\n      // ['0xFDEa65C8e26263F6d9A1B5de9555D2931A33b825']\n    } catch (error) {\n      // Handle error. Likely the user rejected the login\n      console.error(error);\n    }\n\n    provider.on(\"accountsChanged\", function (accounts) {\n      // Time to reload your interface with accounts[0]!\n      selectedAccount = accounts[0];\n      type === \"connect\" && setTxnWithdrawAdd(selectedAccount);\n    });\n    provider.on(\"networkChanged\", function () {// `networkChanged` event is only useful when auto-refresh on network is disabled\n      // Otherwise, Kaikas will auto-reload pages upon network change\n    });\n    isInitialized = true;\n    return true;\n  } else {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    return false;\n  }\n};\nexport const getOwnBalance = async () => {\n  const balance = await caver.klay.getBalance(selectedAccount);\n  return balance / 1000000000000000000;\n};\nexport const depositTransaction = (amount, address, setLoading) => {\n  console.log(\"PROVIDER1\", provider);\n\n  if (typeof provider === \"undefined\") {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    setLoading(false);\n    return false;\n  }\n\n  return new Promise(async (resolve, reject) => {\n    if (provider.networkVersion === NETWORK_CHAIN_ID) {\n      if (!isInitialized) {\n        await initKaikas().then(async res => {\n          if (res) {\n            balanceCheckTrx(amount, address, resolve, reject, setLoading);\n          } else {\n            setLoading(false);\n          }\n        });\n      } else {\n        balanceCheckTrx(amount, address, resolve, reject, setLoading);\n      }\n    } else {\n      setLoading(false);\n      toasts.error(\"Please switch to Mainnet!\");\n    }\n  });\n};\n\nconst sendTransactionKaikas = async (amount, address, setLoading) => {\n  return caver.klay.sendTransaction({\n    type: \"VALUE_TRANSFER\",\n    from: selectedAccount,\n    to: address,\n    value: caver.utils.toPeb(amount, \"KLAY\"),\n    gas: 21000\n  }).once(\"transactionHash\", transactionHash => {}).once(\"receipt\", receipt => {}).once(\"error\", error => {\n    console.log(error.message);\n    setLoading(false);\n    toasts.error((error === null || error === void 0 ? void 0 : error.message) === \"Returned error: Error: Kaikas Tx Signature: User denied transaction signature.\" ? \"Popup closed by user!\" : error.message);\n  });\n};\n\nconst balanceCheckTrx = async (amount, address, resolve, reject, setLoading) => {\n  await getOwnBalance().then(balance => {\n    if (balance > amount) {\n      sendTransactionKaikas(amount, address, setLoading).then(res => {\n        setLoading(false);\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n      toasts.error(\"Insufficient wallet balance\");\n    }\n  }).catch(err => {\n    setLoading(false);\n    console.log(err);\n  });\n};\n\nexport function checkProvider() {\n  if (typeof provider === \"undefined\") {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    return false;\n  } else return true;\n}\nexport const withdrawToKaikas = async (setTxnWithdrawAdd, type, setLoading) => {\n  await initKaikas(setTxnWithdrawAdd, type);\n  return selectedAccount;\n};","map":{"version":3,"names":["toasts","Caver","NETWORK_CHAIN_ID","selectedAccount","isInitialized","provider","window","klaytn","caver","console","log","initKaikas","setTxnWithdrawAdd","type","accounts","enable","error","on","getOwnBalance","balance","klay","getBalance","depositTransaction","amount","address","setLoading","Promise","resolve","reject","networkVersion","then","res","balanceCheckTrx","sendTransactionKaikas","sendTransaction","from","to","value","utils","toPeb","gas","once","transactionHash","receipt","message","catch","err","checkProvider","withdrawToKaikas"],"sources":["/home/eagle/Projects/bouldl/src/WalletClients/KaikasClient.js"],"sourcesContent":["import { toasts } from \"../component/common/Toast/Toast\";\nimport Caver from \"caver-js\";\nimport { NETWORK_CHAIN_ID } from \"../constant\";\n\nlet selectedAccount;\n\nlet isInitialized = false;\n\nlet provider = window.klaytn;\nconst caver = new Caver(provider);\nconsole.log(\"PROVIDER\", provider);\nexport const initKaikas = async (setTxnWithdrawAdd, type) => {\n  if (typeof provider !== \"undefined\") {\n    try {\n      const accounts = await provider.enable();\n      selectedAccount = accounts[0];\n\n      // You now have an array of accounts!\n      // Currently only one:\n      // ['0xFDEa65C8e26263F6d9A1B5de9555D2931A33b825']\n    } catch (error) {\n      // Handle error. Likely the user rejected the login\n      console.error(error);\n    }\n    provider.on(\"accountsChanged\", function (accounts) {\n      // Time to reload your interface with accounts[0]!\n      selectedAccount = accounts[0];\n      type === \"connect\" && setTxnWithdrawAdd(selectedAccount);\n    });\n\n    provider.on(\"networkChanged\", function () {\n      // `networkChanged` event is only useful when auto-refresh on network is disabled\n      // Otherwise, Kaikas will auto-reload pages upon network change\n    });\n    isInitialized = true;\n    return true;\n  } else {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    return false;\n  }\n};\n\nexport const getOwnBalance = async () => {\n  const balance = await caver.klay.getBalance(selectedAccount);\n  return balance / 1000000000000000000;\n};\n\nexport const depositTransaction = (amount, address, setLoading) => {\n  console.log(\"PROVIDER1\", provider);\n  if (typeof provider === \"undefined\") {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    setLoading(false);\n    return false;\n  }\n  return new Promise(async (resolve, reject) => {\n    if (provider.networkVersion === NETWORK_CHAIN_ID) {\n      if (!isInitialized) {\n        await initKaikas().then(async (res) => {\n          if (res) {\n            balanceCheckTrx(amount, address, resolve, reject, setLoading);\n          } else {\n            setLoading(false);\n          }\n        });\n      } else {\n        balanceCheckTrx(amount, address, resolve, reject, setLoading);\n      }\n    } else {\n      setLoading(false);\n      toasts.error(\"Please switch to Mainnet!\");\n    }\n  });\n};\n\nconst sendTransactionKaikas = async (amount, address, setLoading) => {\n  return caver.klay\n    .sendTransaction({\n      type: \"VALUE_TRANSFER\",\n      from: selectedAccount,\n      to: address,\n      value: caver.utils.toPeb(amount, \"KLAY\"),\n      gas: 21000,\n    })\n    .once(\"transactionHash\", (transactionHash) => {})\n    .once(\"receipt\", (receipt) => {})\n    .once(\"error\", (error) => {\n      console.log(error.message);\n      setLoading(false);\n      toasts.error(\n        error?.message ===\n          \"Returned error: Error: Kaikas Tx Signature: User denied transaction signature.\"\n          ? \"Popup closed by user!\"\n          : error.message\n      );\n    });\n};\n\nconst balanceCheckTrx = async (\n  amount,\n  address,\n  resolve,\n  reject,\n  setLoading\n) => {\n  await getOwnBalance()\n    .then((balance) => {\n      if (balance > amount) {\n        sendTransactionKaikas(amount, address, setLoading)\n          .then((res) => {\n            setLoading(false);\n            resolve(res);\n          })\n          .catch((err) => {\n            reject(err);\n            setLoading(false);\n          });\n      } else {\n        setLoading(false);\n        toasts.error(\"Insufficient wallet balance\");\n      }\n    })\n    .catch((err) => {\n      setLoading(false);\n      console.log(err);\n    });\n};\n\nexport function checkProvider() {\n  if (typeof provider === \"undefined\") {\n    toasts.error(\"Please install Kaikas wallet on your browser!\");\n    return false;\n  } else return true;\n}\n\nexport const withdrawToKaikas = async (setTxnWithdrawAdd, type, setLoading) => {\n  await initKaikas(setTxnWithdrawAdd, type);\n  return selectedAccount;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}